



Demo App




In order to have control over how the data is persisted...
  I need to be explicit in my handle of the data




Review what the persisted data looks like
  Task hours are represented as strings
    To fix I'd need to extend the binding to be numeric

How to force numeric input for hours???
  http://knockoutjs.com/documentation/extenders.html

Add promises to API





Convert the view models to classes

Add types for every function

Were the union types on the IProjectTask interface necessary???
  They don't work too well because there aren't really any properties in common



Start making detailed notes on how to do the migration

WebStorm
  How do you navigate to definitions???
  How do you find all references???
  How do you refactor???

Update the API to return promises???
  What promises library to use???
  Built-in browser implementation??? Q???

Switch to VS???
  Try converting the app using VS???



Get this working... then think about how this could be converted to TS
  What features can I highlight???
    Type Definition Files
    Classes
    Modules
    Debugging
    Refactoring
  What features can't I highlight??? What code would I need to add to do so???
    Interfaces... sigh... how can I incorporate interfaces???
      Define interface for the API
      Implement twice
      Inject into the view models
    Arrow functions???
    Properties

What are the improvements that we are making along the way???

Build in a couple of bugs that will be discovered when migrating to TS





Add jQuery validations???

Use Toastr for notifications???








Editors

  Start in VS???
  Then move to Atom???

  Should I keep it simple and just stay in one editor???
  What do I give up if I don't use VS???



Modules

  AMD (Asynchronous Module Definition) - RequireJS
  CommonJS - Browserify??? (also Node.js)

  The primary differences between CommonJS and AMD are as follows:

  CommonJS is synchronous in nature; AMD loads files asynchronously
  CommonJS is primarily used on the server in conjunction with node; AMD is most useful in the browser and its most popular implementation is RequireJS.

  You can configure the TS compiler to combine all compiled JS into a single file

  Information on file globbing
  	http://gruntjs.com/configuring-tasks#globbing-patterns
  		"All most people need to know is that foo/*.js will match all files ending with .js in the foo/ subdirectory, but foo/**/*.js will match all files ending with .js in the foo/ subdirectory and all of its subdirectories."
